import { h, type AllowedComponentProps, type ComponentCustomProps, type ExtractPropTypes, type IntrinsicElementAttributes, type VNodeProps } from 'vue';
type DOMElements = keyof IntrinsicElementAttributes;
type ElementType = Parameters<typeof h>[0];
export interface PolimoprhicProps {
    /**
     * @default false
     */
    asChild?: boolean;
}
export type AsChildComponent<Component extends ElementType, P extends Record<string, unknown> = Record<never, never>> = {
    new (): {
        $props: AllowedComponentProps & ComponentCustomProps & VNodeProps & ExtractPropTypes<Component> & (Component extends keyof IntrinsicElementAttributes ? IntrinsicElementAttributes[Component] : Record<never, never>) & P & PolimoprhicProps;
    };
};
export type HTMLPolymorphicComponents = {
    [E in DOMElements]: AsChildComponent<E>;
};
export type HTMLPolymorphicProps<T extends ElementType> = Omit<ExtractPropTypes<T extends DOMElements ? IntrinsicElementAttributes[T] : T>, 'ref'> & {
    asChild?: boolean;
};
export type HTMLArkProps<T extends DOMElements> = HTMLPolymorphicProps<T>;
export declare function jsxFactory(): HTMLPolymorphicComponents;
export declare const ark: HTMLPolymorphicComponents;
export {};
