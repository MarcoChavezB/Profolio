import type { PropType } from 'vue';
export declare const props: {
    dir: {
        type: PropType<"ltr" | "rtl" | undefined>;
    };
    disabled: {
        type: PropType<boolean | undefined>;
        default: undefined;
    };
    form: {
        type: PropType<string | undefined>;
    };
    getAriaValueText: {
        type: PropType<((value: number, index: number) => string) | undefined>;
    };
    getRootNode: {
        type: PropType<(() => Node | ShadowRoot | Document) | undefined>;
    };
    id: {
        type: PropType<string>;
    };
    ids: {
        type: PropType<Partial<{
            root: string;
            thumb(index: number): string;
            control: string;
            track: string;
            range: string;
            label: string;
            valueText: string;
            marker(index: number): string;
        }> | undefined>;
    };
    invalid: {
        type: PropType<boolean | undefined>;
        default: undefined;
    };
    max: {
        type: PropType<number | undefined>;
    };
    min: {
        type: PropType<number | undefined>;
    };
    minStepsBetweenThumbs: {
        type: PropType<number | undefined>;
    };
    name: {
        type: PropType<string | undefined>;
    };
    orientation: {
        type: PropType<"horizontal" | "vertical" | undefined>;
    };
    origin: {
        type: PropType<"start" | "center" | undefined>;
    };
    readOnly: {
        type: PropType<boolean | undefined>;
        default: undefined;
    };
    step: {
        type: PropType<number | undefined>;
    };
    thumbAlignment: {
        type: PropType<"center" | "contain" | undefined>;
    };
    thumbSize: {
        type: PropType<{
            width: number;
            height: number;
        } | null | undefined>;
    };
    modelValue: {
        type: PropType<number[] | undefined>;
    };
};
export declare const emits: ("focus-change" | "value-change" | "update:modelValue" | "value-change-end")[];
