import * as colorPicker from '@zag-js/color-picker';
import { useMachine, normalizeProps } from '@zag-js/vue';
import { computed } from 'vue';
import { useEnvironmentContext } from '../environment/environment-context.mjs';
import { useId } from '../utils.mjs';

const useColorPicker = (props, emit) => {
  const getRootNode = useEnvironmentContext();
  const context = computed(() => {
    const { modelValue, ...rest } = props;
    return {
      ...rest,
      value: modelValue ? colorPicker.parse(modelValue) : void 0
    };
  });
  const [state, send] = useMachine(
    colorPicker.machine({
      ...context.value,
      id: context.value.id ?? useId().value,
      getRootNode,
      onFormatChange(details) {
        emit("format-change", details);
      },
      onOpenChange(details) {
        emit("open-change", details);
      },
      onValueChange(details) {
        emit("value-change", details);
        emit("update:modelValue", details.valueAsString);
      },
      onValueChangeEnd(details) {
        emit("value-change-end", details);
      }
    }),
    { context }
  );
  return computed(() => colorPicker.connect(state.value, send, normalizeProps));
};

export { useColorPicker };
