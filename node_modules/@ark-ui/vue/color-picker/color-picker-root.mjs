import { defineComponent, computed, createVNode, Fragment, mergeProps } from 'vue';
import { ark } from '../factory.mjs';
import { PresenceProvider } from '../presence/presence-context.mjs';
import { usePresence } from '../presence/use-presence.mjs';
import { props as props$1, emits as emits$1 } from '../presence/presence.props.mjs';
import { ColorPickerProvider } from './color-picker-context.mjs';
import { props, emits } from './color-picker.props.mjs';
import { useColorPicker } from './use-color-picker.mjs';

const ColorPickerRoot = /* @__PURE__ */ defineComponent((props, {
  slots,
  emit,
  attrs
}) => {
  const api = useColorPicker(props, emit);
  const isOpen = computed(() => api.value.isOpen);
  const presenceProps = computed(() => ({
    present: props.present || isOpen.value,
    lazyMount: props.lazyMount,
    unmountOnExit: props.unmountOnExit
  }));
  const presenceApi = usePresence(presenceProps, emit);
  ColorPickerProvider(api);
  PresenceProvider(presenceApi);
  return () => createVNode(Fragment, null, [createVNode(ark.div, mergeProps(api.value.rootProps, attrs), {
    default: () => [slots.default?.(api.value)]
  }), createVNode("input", api.value.hiddenInputProps, null)]);
}, {
  name: 'ColorPickerRoot',
  props: {
    ...props,
    ...props$1
  },
  emits: [...emits, ...emits$1]
});

export { ColorPickerRoot };
