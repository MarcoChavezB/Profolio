'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const fileUpload = require('@zag-js/file-upload');
const vue$1 = require('@zag-js/vue');
const vue = require('vue');
const environmentContext = require('../environment/environment-context.cjs');
const utils = require('../utils.cjs');

function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: 'Module' } });
  if (e) {
    for (const k in e) {
      if (k !== 'default') {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}

const fileUpload__namespace = /*#__PURE__*/_interopNamespaceDefault(fileUpload);

const useFileUpload = (props, emit) => {
  const getRootNode = environmentContext.useEnvironmentContext();
  const context = vue.ref(props);
  const [state, send] = vue$1.useMachine(
    fileUpload__namespace.machine({
      ...context.value,
      id: context.value.id ?? utils.useId().value,
      getRootNode,
      onFilesChange: (details) => {
        emit("files-change", details);
      },
      onFileAccept: (details) => {
        emit("file-accept", details);
      },
      onFileReject(details) {
        emit("file-reject", details);
      }
    }),
    { context }
  );
  return vue.computed(() => fileUpload__namespace.connect(state.value, send, vue$1.normalizeProps));
};

exports.useFileUpload = useFileUpload;
