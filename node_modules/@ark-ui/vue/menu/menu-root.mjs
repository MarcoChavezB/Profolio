import { defineComponent, onMounted, computed } from 'vue';
import { PresenceProvider } from '../presence/presence-context.mjs';
import { usePresence } from '../presence/use-presence.mjs';
import { props as props$1, emits as emits$1 } from '../presence/presence.props.mjs';
import { useMenuContext, useMenuMachineContext, MenuTriggerItemProvider, MenuMachineProvider, MenuProvider } from './menu-context.mjs';
import { props, emits } from './menu.props.mjs';
import { useMenu } from './use-menu.mjs';

const MenuRoot = /* @__PURE__ */ defineComponent((props, {
  slots,
  emit
}) => {
  const {
    api,
    machine
  } = useMenu(props, emit);
  const parentApi = useMenuContext();
  const parentMachine = useMenuMachineContext();
  onMounted(() => {
    if (!parentMachine) return;
    parentApi.value.setChild(machine);
    api.value.setParent(parentMachine);
  });
  const isOpen = computed(() => api.value.isOpen);
  const presenceProps = computed(() => ({
    present: props.present || isOpen.value,
    lazyMount: props.lazyMount,
    unmountOnExit: props.unmountOnExit
  }));
  const presenceApi = usePresence(presenceProps, emit);
  MenuTriggerItemProvider(computed(() => parentApi.value.getTriggerItemProps(api.value)));
  MenuMachineProvider(machine);
  MenuProvider(api);
  PresenceProvider(presenceApi);
  return () => {
    return slots.default?.(api.value);
  };
}, {
  name: 'MenuRoot',
  props: {
    ...props,
    ...props$1
  },
  emits: [...emits, ...emits$1]
});

export { MenuRoot };
