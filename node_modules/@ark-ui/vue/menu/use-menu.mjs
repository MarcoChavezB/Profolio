import * as menu from '@zag-js/menu';
import { useMachine, normalizeProps } from '@zag-js/vue';
import { computed, watch } from 'vue';
import { useEnvironmentContext } from '../environment/environment-context.mjs';
import { useId } from '../utils.mjs';

const useMenu = (props, emit) => {
  const context = computed(() => {
    const { modelValue, ...rest } = props;
    return {
      ...rest,
      value: modelValue
    };
  });
  const getRootNode = useEnvironmentContext();
  const [state, send, machine] = useMachine(
    menu.machine({
      ...context.value,
      id: context.value.id || useId().value,
      getRootNode,
      onOpenChange: (details) => {
        emit("open-change", details);
      },
      onSelect: (details) => {
        emit("select", details);
      },
      onValueChange: (details) => {
        emit("value-change", details);
        emit("update:modelValue", details.value);
      }
    })
  );
  watch(
    () => context.value.open,
    (value) => {
      if (value === void 0)
        return;
      if (value) {
        api.value.open();
      } else {
        api.value.close();
      }
    }
  );
  const api = computed(() => menu.connect(state.value, send, normalizeProps));
  return {
    api,
    machine
  };
};

export { useMenu };
