import * as zagSwitch from '@zag-js/switch';
import { useMachine, normalizeProps } from '@zag-js/vue';
import { computed } from 'vue';
import { useEnvironmentContext } from '../environment/environment-context.mjs';
import { useId } from '../utils.mjs';

const useSwitch = (props, emit) => {
  const getRootNode = useEnvironmentContext();
  const context = computed(() => {
    const { modelValue, ...rest } = props;
    return {
      ...rest,
      checked: modelValue
    };
  });
  const [state, send] = useMachine(
    zagSwitch.machine({
      ...context.value,
      id: context.value.id || useId().value,
      getRootNode,
      onCheckedChange(details) {
        emit("checked-change", details);
        emit("update:modelValue", details.checked);
      }
    }),
    { context }
  );
  return computed(() => zagSwitch.connect(state.value, send, normalizeProps));
};

export { useSwitch };
