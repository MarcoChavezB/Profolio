import * as tooltip from '@zag-js/tooltip';
import { useMachine, normalizeProps } from '@zag-js/vue';
import { reactive, computed, watch } from 'vue';
import { useEnvironmentContext } from '../environment/environment-context.mjs';
import { useId } from '../utils.mjs';

const useTooltip = (props, emit) => {
  const reactiveContext = reactive(props);
  const getRootNode = useEnvironmentContext();
  const [state, send] = useMachine(
    tooltip.machine({
      ...reactiveContext,
      id: reactiveContext.id ?? useId().value,
      getRootNode,
      onOpenChange: (details) => {
        emit("open-change", details);
      }
    })
  );
  const api = computed(() => tooltip.connect(state.value, send, normalizeProps));
  watch(
    () => reactiveContext.open,
    (value) => {
      if (value === void 0)
        return;
      if (value) {
        api.value.open();
      } else {
        api.value.close();
      }
    }
  );
  return api;
};

export { useTooltip };
