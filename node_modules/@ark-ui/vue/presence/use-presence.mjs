import * as presence from '@zag-js/presence';
import { useMachine, normalizeProps } from '@zag-js/vue';
import { ref, computed, watch } from 'vue';

const usePresence = (props, emit) => {
  const context = ref(props);
  const wasEverPresent = ref(false);
  const nodeRef = ref(null);
  const [state, send] = useMachine(
    presence.machine({
      ...context.value,
      onExitComplete: () => {
        emit("exit-complete");
      }
    }),
    { context }
  );
  const api = computed(() => presence.connect(state.value, send, normalizeProps));
  watch(
    () => api.value.isPresent,
    () => {
      const isPresent = api.value.isPresent;
      if (isPresent)
        wasEverPresent.value = true;
    }
  );
  watch(nodeRef, () => {
    if (nodeRef.value) {
      const node = nodeRef.value.$el ? nodeRef.value.$el : nodeRef.value;
      if (node) {
        api.value.setNode(node);
      }
    }
  });
  return computed(() => ({
    isPresent: api.value.isPresent,
    isUnmounted: !api.value.isPresent && !wasEverPresent.value && context.value.lazyMount || context.value?.unmountOnExit && !api.value?.isPresent && wasEverPresent.value,
    presenceProps: {
      ref: nodeRef,
      hidden: !api.value.isPresent,
      "data-state": context.value?.present ? "open" : "closed"
    }
  }));
};

export { usePresence };
