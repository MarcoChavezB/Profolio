'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const presence = require('@zag-js/presence');
const vue$1 = require('@zag-js/vue');
const vue = require('vue');

function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: 'Module' } });
  if (e) {
    for (const k in e) {
      if (k !== 'default') {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}

const presence__namespace = /*#__PURE__*/_interopNamespaceDefault(presence);

const usePresence = (props, emit) => {
  const context = vue.ref(props);
  const wasEverPresent = vue.ref(false);
  const nodeRef = vue.ref(null);
  const [state, send] = vue$1.useMachine(
    presence__namespace.machine({
      ...context.value,
      onExitComplete: () => {
        emit("exit-complete");
      }
    }),
    { context }
  );
  const api = vue.computed(() => presence__namespace.connect(state.value, send, vue$1.normalizeProps));
  vue.watch(
    () => api.value.isPresent,
    () => {
      const isPresent = api.value.isPresent;
      if (isPresent)
        wasEverPresent.value = true;
    }
  );
  vue.watch(nodeRef, () => {
    if (nodeRef.value) {
      const node = nodeRef.value.$el ? nodeRef.value.$el : nodeRef.value;
      if (node) {
        api.value.setNode(node);
      }
    }
  });
  return vue.computed(() => ({
    isPresent: api.value.isPresent,
    isUnmounted: !api.value.isPresent && !wasEverPresent.value && context.value.lazyMount || context.value?.unmountOnExit && !api.value?.isPresent && wasEverPresent.value,
    presenceProps: {
      ref: nodeRef,
      hidden: !api.value.isPresent,
      "data-state": context.value?.present ? "open" : "closed"
    }
  }));
};

exports.usePresence = usePresence;
