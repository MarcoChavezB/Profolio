import { defineComponent, computed, createVNode, mergeProps } from 'vue';
import { ark } from '../factory.mjs';
import { PresenceProvider } from '../presence/presence-context.mjs';
import { usePresence } from '../presence/use-presence.mjs';
import { props as props$1, emits as emits$1 } from '../presence/presence.props.mjs';
import { ComboboxProvider } from './combobox-context.mjs';
import { props, emits } from './combobox.props.mjs';
import { useCombobox } from './use-combobox.mjs';

// TOOD: #2011 this is a bad workaround but should work for now
// function signature doesn't really support more complicated generics

const ComboboxRoot = /* @__PURE__ */ defineComponent((props, {
  slots,
  attrs,
  emit
}) => {
  const api = useCombobox(props, emit);
  const isOpen = computed(() => api.value.isOpen);
  const presenceProps = computed(() => ({
    present: props.present || isOpen.value,
    lazyMount: props.lazyMount,
    unmountOnExit: props.unmountOnExit
  }));
  const presenceApi = usePresence(presenceProps, emit);
  ComboboxProvider(api);
  PresenceProvider(presenceApi);
  return () => createVNode(ark.div, mergeProps(api.value.rootProps, attrs), {
    default: () => [slots.default?.(api.value)]
  });
}, {
  name: 'ComboboxRoot',
  props: {
    ...props,
    ...props$1,
    items: {
      type: Array,
      required: true
    },
    itemToString: {
      type: Function
    },
    itemToValue: {
      type: Function
    },
    isItemDisabled: {
      type: Function
    }
  },
  emits: [...emits, ...emits$1]
});

export { ComboboxRoot };
