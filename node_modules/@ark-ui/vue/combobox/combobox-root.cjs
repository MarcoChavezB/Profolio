'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const vue = require('vue');
const factory = require('../factory.cjs');
const presenceContext = require('../presence/presence-context.cjs');
const usePresence = require('../presence/use-presence.cjs');
const presence_props = require('../presence/presence.props.cjs');
const comboboxContext = require('./combobox-context.cjs');
const combobox_props = require('./combobox.props.cjs');
const useCombobox = require('./use-combobox.cjs');

// TOOD: #2011 this is a bad workaround but should work for now
// function signature doesn't really support more complicated generics

const ComboboxRoot = /* @__PURE__ */ vue.defineComponent((props, {
  slots,
  attrs,
  emit
}) => {
  const api = useCombobox.useCombobox(props, emit);
  const isOpen = vue.computed(() => api.value.isOpen);
  const presenceProps = vue.computed(() => ({
    present: props.present || isOpen.value,
    lazyMount: props.lazyMount,
    unmountOnExit: props.unmountOnExit
  }));
  const presenceApi = usePresence.usePresence(presenceProps, emit);
  comboboxContext.ComboboxProvider(api);
  presenceContext.PresenceProvider(presenceApi);
  return () => vue.createVNode(factory.ark.div, vue.mergeProps(api.value.rootProps, attrs), {
    default: () => [slots.default?.(api.value)]
  });
}, {
  name: 'ComboboxRoot',
  props: {
    ...combobox_props.props,
    ...presence_props.props,
    items: {
      type: Array,
      required: true
    },
    itemToString: {
      type: Function
    },
    itemToValue: {
      type: Function
    },
    isItemDisabled: {
      type: Function
    }
  },
  emits: [...combobox_props.emits, ...presence_props.emits]
});

exports.ComboboxRoot = ComboboxRoot;
