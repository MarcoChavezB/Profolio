import * as combobox from '@zag-js/combobox';
import { useMachine, normalizeProps } from '@zag-js/vue';
import { computed } from 'vue';
import { useEnvironmentContext } from '../environment/environment-context.mjs';
import { useId } from '../utils.mjs';

const useCombobox = (props, emit) => {
  const getRootNode = useEnvironmentContext();
  const context = computed(() => {
    const { items, itemToString, itemToValue, isItemDisabled, modelValue, ...rest } = props;
    return {
      ...rest,
      collection: combobox.collection({ items, itemToString, itemToValue, isItemDisabled }),
      value: modelValue
    };
  });
  const [state, send] = useMachine(
    combobox.machine({
      ...context.value,
      id: context.value.id ?? useId().value,
      getRootNode,
      onHighlightChange: (details) => {
        emit("highlight-change", details);
      },
      onInputValueChange: (details) => {
        emit("input-value-change", details);
      },
      onOpenChange: (details) => {
        emit("open-change", details);
      },
      onValueChange: (details) => {
        emit("value-change", details);
        emit("update:modelValue", details.value);
      }
    }),
    { context }
  );
  return computed(() => combobox.connect(state.value, send, normalizeProps));
};

export { useCombobox };
