'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const vue = require('vue');
const toast = require('@zag-js/toast');
const vue$1 = require('@zag-js/vue');
const environmentContext = require('../environment/environment-context.cjs');
const toastContext = require('./toast-context.cjs');
const toastGroup = require('./toast-group.cjs');

function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: 'Module' } });
  if (e) {
    for (const k in e) {
      if (k !== 'default') {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}

const toast__namespace = /*#__PURE__*/_interopNamespaceDefault(toast);

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
}
const createToaster = props => {
  const {
    placement,
    ...rest
  } = props;
  const service = toast__namespace.group.machine({
    id: '1',
    placement,
    ...rest
  }).start();
  let api = vue.computed(() => toast__namespace.group.connect(service.getState(), service.send, vue$1.normalizeProps));
  const Toaster = /* @__PURE__ */ vue.defineComponent((_, {
    attrs
  }) => {
    const getRootNode = environmentContext.useEnvironmentContext();
    const [state, send] = vue$1.useActor(service);
    api = vue.computed(() => toast__namespace.group.connect(state.value, send, vue$1.normalizeProps));
    vue.onMounted(() => {
      service.setContext({
        getRootNode
      });
    });
    vue.onUnmounted(() => {
      service.stop();
    });
    return () => {
      let _slot;
      return vue.createVNode(toastGroup.ToastGroup, vue.mergeProps(api.value.getGroupProps({
        placement
      }), attrs), _isSlot(_slot = (api.value.toastsByPlacement[placement] ?? []).map(toast => vue.createVNode(ToastProviderFactory, {
        "key": toast.id,
        "service": toast
      }, null))) ? _slot : {
        default: () => [_slot]
      });
    };
  }, {
    name: 'Toaster'
  });
  return [Toaster, api];
};
const ToastProviderFactory = /* @__PURE__ */ vue.defineComponent({
  name: 'ToastProviderFactory',
  props: {
    service: {
      type: Object,
      required: true
    }
  },
  setup(props) {
    const service = vue.toRef(props, 'service');
    const [state, send] = vue$1.useActor(service.value);
    const api = vue.computed(() => toast__namespace.connect(state.value, send, vue$1.normalizeProps));
    toastContext.ToastProvider(api);
    return () => state.value.context.render?.(api.value);
  }
});

exports.ToastProviderFactory = ToastProviderFactory;
exports.createToaster = createToaster;
