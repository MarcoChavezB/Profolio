import * as toast from '@zag-js/toast';
import { type PropTypes } from '@zag-js/vue';
import { DefineComponent, ComponentOptionsMixin, PublicProps, ExtractPropTypes, type Component, type ComputedRef, type PropType, type VNode } from 'vue';
import type { Optional } from '../types';
type GroupContext = Partial<toast.GroupMachineContext>;
export interface CreateToasterProps extends Omit<Optional<GroupContext, 'id'>, 'render'> {
    placement: toast.Placement;
    render: (api: toast.Api<PropTypes>) => VNode;
}
export type CreateToasterReturn = [Component, ComputedRef<toast.GroupApi<PropTypes>>];
export declare const createToaster: (props: CreateToasterProps) => CreateToasterReturn;
export declare const ToastProviderFactory: DefineComponent<{
    service: {
        type: PropType<toast.Service>;
        required: true;
    };
}, () => any, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    service: {
        type: PropType<toast.Service>;
        required: true;
    };
}>>, {}, {}>;
export {};
