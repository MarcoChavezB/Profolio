import { computed, defineComponent, onMounted, onUnmounted, createVNode, mergeProps, toRef, isVNode } from 'vue';
import * as toast from '@zag-js/toast';
import { normalizeProps, useActor } from '@zag-js/vue';
import { useEnvironmentContext } from '../environment/environment-context.mjs';
import { ToastProvider } from './toast-context.mjs';
import { ToastGroup } from './toast-group.mjs';

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
const createToaster = props => {
  const {
    placement,
    ...rest
  } = props;
  const service = toast.group.machine({
    id: '1',
    placement,
    ...rest
  }).start();
  let api = computed(() => toast.group.connect(service.getState(), service.send, normalizeProps));
  const Toaster = /* @__PURE__ */ defineComponent((_, {
    attrs
  }) => {
    const getRootNode = useEnvironmentContext();
    const [state, send] = useActor(service);
    api = computed(() => toast.group.connect(state.value, send, normalizeProps));
    onMounted(() => {
      service.setContext({
        getRootNode
      });
    });
    onUnmounted(() => {
      service.stop();
    });
    return () => {
      let _slot;
      return createVNode(ToastGroup, mergeProps(api.value.getGroupProps({
        placement
      }), attrs), _isSlot(_slot = (api.value.toastsByPlacement[placement] ?? []).map(toast => createVNode(ToastProviderFactory, {
        "key": toast.id,
        "service": toast
      }, null))) ? _slot : {
        default: () => [_slot]
      });
    };
  }, {
    name: 'Toaster'
  });
  return [Toaster, api];
};
const ToastProviderFactory = /* @__PURE__ */ defineComponent({
  name: 'ToastProviderFactory',
  props: {
    service: {
      type: Object,
      required: true
    }
  },
  setup(props) {
    const service = toRef(props, 'service');
    const [state, send] = useActor(service.value);
    const api = computed(() => toast.connect(state.value, send, normalizeProps));
    ToastProvider(api);
    return () => state.value.context.render?.(api.value);
  }
});

export { ToastProviderFactory, createToaster };
