import * as splitter from '@zag-js/splitter';
import { useMachine, normalizeProps } from '@zag-js/vue';
import { ref, computed } from 'vue';
import { useEnvironmentContext } from '../environment/environment-context.mjs';
import { useId } from '../utils.mjs';

const useSplitter = (props, emit) => {
  const context = ref(props);
  const getRootNode = useEnvironmentContext();
  const [state, send] = useMachine(
    splitter.machine({
      ...context.value,
      id: context.value.id ?? useId().value,
      getRootNode,
      onSizeChange: (details) => {
        emit("size-change", details);
      },
      onSizeChangeStart: (details) => {
        emit("size-change-start", details);
      },
      onSizeChangeEnd(details) {
        emit("size-change-end", details);
      }
    }),
    { context }
  );
  return computed(() => splitter.connect(state.value, send, normalizeProps));
};

export { useSplitter };
