import * as dialog from '@zag-js/dialog';
import { useMachine, normalizeProps } from '@zag-js/vue';
import { ref, computed } from 'vue';
import { useEnvironmentContext } from '../environment/environment-context.mjs';
import { useId } from '../utils.mjs';

const useDialog = (props, emit) => {
  const context = ref(props);
  const getRootNode = useEnvironmentContext();
  const [state, send] = useMachine(
    dialog.machine({
      ...context.value,
      id: context.value.id || useId().value,
      open: props.open ?? props.defaultOpen,
      getRootNode,
      onOpenChange: (details) => {
        emit("open-change", details);
        emit("update:open", details.open);
      },
      onEscapeKeyDown: (details) => {
        emit("escape-key-down", details);
      },
      onFocusOutside: (details) => {
        emit("focus-outside", details);
      },
      onInteractOutside: (details) => {
        emit("interact-outside", details);
      },
      onPointerDownOutside: (details) => {
        emit("pointer-down-outside", details);
      }
    }),
    { context }
  );
  return computed(() => dialog.connect(state.value, send, normalizeProps));
};

export { useDialog };
