import { defineComponent, computed, createVNode, mergeProps } from 'vue';
import { ark } from '../factory.mjs';
import { PresenceProvider } from '../presence/presence-context.mjs';
import { usePresencePropsContext } from '../presence/presence-props-context.mjs';
import { usePresence } from '../presence/use-presence.mjs';
import { emits } from '../presence/presence.props.mjs';
import { useAccordionContext } from './accordion-context.mjs';
import { AccordionItemProvider } from './accordion-item-context.mjs';

const AccordionItem = /* @__PURE__ */ defineComponent((props, {
  slots,
  attrs,
  emit
}) => {
  const api = useAccordionContext();
  const itemState = computed(() => api.value.getItemState(props));
  const presenceProps = usePresencePropsContext();
  const usePresenceProps = computed(() => ({
    ...presenceProps.value,
    present: itemState.value.isOpen
  }));
  const presenceApi = usePresence(usePresenceProps, emit);
  AccordionItemProvider(computed(() => props));
  PresenceProvider(presenceApi);
  return () => createVNode(ark.div, mergeProps(api.value.getItemProps(props), attrs), {
    default: () => [slots.default?.(itemState.value)]
  });
}, {
  name: 'AccordionItem',
  props: {
    value: {
      type: String,
      required: true
    },
    disabled: {
      type: Boolean,
      default: undefined
    }
  },
  emits
});

export { AccordionItem };
