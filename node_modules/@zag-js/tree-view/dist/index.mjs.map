{"version":3,"sources":["../src/tree-view.anatomy.ts","../src/tree-view.connect.ts","../src/tree-view.dom.ts","../src/tree-view.machine.ts"],"sourcesContent":["import { createAnatomy } from \"@zag-js/anatomy\"\n\nexport const anatomy = createAnatomy(\"tree-view\").parts(\n  \"root\",\n  \"label\",\n  \"tree\",\n  \"item\",\n  \"itemText\",\n  \"branch\",\n  \"branchControl\",\n  \"branchTrigger\",\n  \"branchContent\",\n  \"branchText\",\n  \"branchIndicator\",\n)\n\nexport const parts = anatomy.build()\n","import { getEventKey, getNativeEvent, isModifiedEvent, type EventKeyMap } from \"@zag-js/dom-event\"\nimport { contains, dataAttr, getEventTarget } from \"@zag-js/dom-query\"\nimport type { NormalizeProps, PropTypes } from \"@zag-js/types\"\nimport { parts } from \"./tree-view.anatomy\"\nimport { dom } from \"./tree-view.dom\"\nimport type { BranchProps, BranchState, ItemProps, ItemState, MachineApi, Send, State } from \"./tree-view.types\"\n\nexport function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T> {\n  const expandedIds = state.context.expandedIds\n  const selectedIds = state.context.selectedIds\n  const isTypingAhead = state.context.isTypingAhead\n  const focusedId = state.context.focusedId\n\n  function getItemState(props: ItemProps): ItemState {\n    return {\n      id: props.id,\n      isDisabled: Boolean(props.disabled),\n      isFocused: focusedId === props.id,\n      isSelected: selectedIds.has(props.id),\n    }\n  }\n\n  function getBranchState(props: BranchProps): BranchState {\n    return {\n      id: props.id,\n      isDisabled: Boolean(props.disabled),\n      isFocused: focusedId === props.id,\n      isExpanded: expandedIds.has(props.id),\n      isSelected: selectedIds.has(props.id),\n    }\n  }\n\n  return {\n    expandedIds,\n    selectedIds,\n    expand(ids) {\n      const nextSet = new Set(expandedIds)\n      ids.forEach((id) => nextSet.add(id))\n      send({ type: \"EXPANDED.SET\", value: nextSet, src: \"expand\" })\n    },\n    expandAll() {\n      send({ type: \"EXPANDED.ALL\" })\n    },\n    collapse(ids) {\n      const nextSet = new Set(expandedIds)\n      ids.forEach((id) => nextSet.delete(id))\n      send({ type: \"EXPANDED.SET\", value: nextSet, src: \"collapse\" })\n    },\n    collapseAll() {\n      send({ type: \"EXPANDED.SET\", value: new Set([]), src: \"collapseAll\" })\n    },\n    selectAll() {\n      send({ type: \"SELECTED.ALL\" })\n    },\n    deselect(ids) {\n      const nextSet = new Set(selectedIds)\n      ids.forEach((id) => nextSet.delete(id))\n      send({ type: \"SELECTED.SET\", value: nextSet, src: \"deselect\" })\n    },\n    deselectAll() {\n      send({ type: \"SELECTED.SET\", value: new Set([]), src: \"deselectAll\" })\n    },\n    select(ids) {\n      const nextSet = new Set(selectedIds)\n      ids.forEach((id) => nextSet.add(id))\n      send({ type: \"SELECTED.SET\", value: nextSet, src: \"select\" })\n    },\n    focusBranch(id) {\n      dom.getBranchControlEl(state.context, id)?.focus()\n    },\n    focusItem(id) {\n      dom.getItemEl(state.context, id)?.focus()\n    },\n\n    rootProps: normalize.element({\n      ...parts.root.attrs,\n      id: dom.getRootId(state.context),\n      dir: state.context.dir,\n    }),\n\n    labelProps: normalize.element({\n      ...parts.label.attrs,\n      id: dom.getLabelId(state.context),\n      dir: state.context.dir,\n    }),\n\n    treeProps: normalize.element({\n      ...parts.tree.attrs,\n      id: dom.getTreeId(state.context),\n      dir: state.context.dir,\n      role: \"tree\",\n      \"aria-label\": \"Tree View\",\n      \"aria-labelledby\": dom.getLabelId(state.context),\n      \"aria-multiselectable\": state.context.selectionMode === \"multiple\" || undefined,\n      onKeyDown(event) {\n        const evt = getNativeEvent(event)\n        const target = getEventTarget<HTMLElement>(evt)\n\n        const node = target?.closest<HTMLElement>(\"[role=treeitem]\")\n        if (!node) return\n\n        const nodeId = dom.getNodeId(node)\n        if (nodeId == null) {\n          console.warn(`Node id not found for node`, node)\n          return\n        }\n\n        const isBranchNode = !!target?.dataset.branch\n\n        const keyMap: EventKeyMap = {\n          ArrowDown(event) {\n            if (isModifiedEvent(event)) return\n            event.preventDefault()\n            send({ type: \"ITEM.ARROW_DOWN\", id: nodeId, shiftKey: event.shiftKey })\n          },\n          ArrowUp(event) {\n            if (isModifiedEvent(event)) return\n            event.preventDefault()\n            send({ type: \"ITEM.ARROW_UP\", id: nodeId, shiftKey: event.shiftKey })\n          },\n          ArrowLeft(event) {\n            if (isModifiedEvent(event) || node.dataset.disabled) return\n            event.preventDefault()\n            send({ type: isBranchNode ? \"BRANCH.ARROW_LEFT\" : \"ITEM.ARROW_LEFT\", id: nodeId })\n          },\n          ArrowRight(event) {\n            if (!isBranchNode || node.dataset.disabled) return\n            event.preventDefault()\n            send({ type: \"BRANCH.ARROW_RIGHT\", id: nodeId })\n          },\n          Home(event) {\n            if (isModifiedEvent(event)) return\n            event.preventDefault()\n            send({ type: \"ITEM.HOME\", id: nodeId, shiftKey: event.shiftKey })\n          },\n          End(event) {\n            if (isModifiedEvent(event)) return\n            event.preventDefault()\n            send({ type: \"ITEM.END\", id: nodeId, shiftKey: event.shiftKey })\n          },\n          Space(event) {\n            if (node.dataset.disabled) return\n\n            if (isTypingAhead) {\n              send({ type: \"TREE.TYPEAHEAD\", key: event.key })\n            } else {\n              keyMap.Enter?.(event)\n            }\n          },\n          Enter(event) {\n            if (node.dataset.disabled) return\n\n            event.preventDefault()\n            send({ type: isBranchNode ? \"BRANCH.CLICK\" : \"ITEM.CLICK\", id: nodeId, src: \"keyboard\" })\n          },\n          \"*\"(event) {\n            if (node.dataset.disabled) return\n            event.preventDefault()\n            send({ type: \"EXPAND.SIBLINGS\", id: nodeId })\n          },\n          a(event) {\n            if (!event.metaKey || node.dataset.disabled) return\n            event.preventDefault()\n            send({ type: \"SELECTED.ALL\", preventScroll: true, moveFocus: true })\n          },\n        }\n\n        const key = getEventKey(event, state.context)\n        const exec = keyMap[key]\n\n        if (exec) {\n          exec(event)\n        } else {\n          const isValidTypeahead = event.key.length === 1 && !isModifiedEvent(event)\n          if (!isValidTypeahead) return\n\n          send({ type: \"TREE.TYPEAHEAD\", key: event.key, id: nodeId })\n          event.preventDefault()\n        }\n      },\n      onBlur(event) {\n        if (contains(event.currentTarget, event.relatedTarget)) return\n        send({ type: \"TREE.BLUR\" })\n      },\n    }),\n\n    getItemState,\n    getItemProps(props) {\n      const itemState = getItemState(props)\n      return normalize.element({\n        ...parts.item.attrs,\n        dir: state.context.dir,\n        \"data-ownedby\": dom.getTreeId(state.context),\n        \"data-item\": itemState.id,\n        tabIndex: itemState.isFocused ? 0 : -1,\n        \"data-focused\": dataAttr(itemState.isFocused),\n        role: \"treeitem\",\n        \"aria-current\": itemState.isSelected ? \"true\" : undefined,\n        \"aria-selected\": itemState.isDisabled ? undefined : itemState.isSelected,\n        \"data-selected\": dataAttr(itemState.isSelected),\n        \"aria-disabled\": itemState.isDisabled,\n        \"data-disabled\": dataAttr(itemState.isDisabled),\n        \"aria-level\": props.depth,\n        \"data-depth\": props.depth,\n        style: {\n          \"--depth\": props.depth,\n        },\n        onFocus(event) {\n          event.stopPropagation()\n          send({ type: \"ITEM.FOCUS\", id: itemState.id })\n        },\n        onClick(event) {\n          if (itemState.isDisabled) return\n          const isMetaKey = event.metaKey || event.ctrlKey\n          send({ type: \"ITEM.CLICK\", id: itemState.id, shiftKey: event.shiftKey, ctrlKey: isMetaKey })\n          event.stopPropagation()\n          event.preventDefault()\n        },\n      })\n    },\n\n    getBranchState,\n    getBranchProps(props) {\n      const branchState = getBranchState(props)\n      return normalize.element({\n        ...parts.branch.attrs,\n        \"data-depth\": props.depth,\n        dir: state.context.dir,\n        \"data-branch\": branchState.id,\n        role: \"treeitem\",\n        \"data-ownedby\": dom.getTreeId(state.context),\n        \"aria-level\": props.depth,\n        \"aria-selected\": branchState.isDisabled ? undefined : branchState.isSelected,\n        \"data-selected\": dataAttr(branchState.isSelected),\n        \"aria-expanded\": branchState.isExpanded,\n        \"data-state\": branchState.isExpanded ? \"open\" : \"closed\",\n        \"aria-disabled\": branchState.isDisabled,\n        \"data-disabled\": dataAttr(branchState.isDisabled),\n        style: {\n          \"--depth\": props.depth,\n        },\n      })\n    },\n\n    getBranchTriggerProps(props) {\n      const branchState = getBranchState(props)\n      return normalize.element({\n        ...parts.branchTrigger.attrs,\n        role: \"button\",\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(branchState.isDisabled),\n        \"data-state\": branchState.isExpanded ? \"open\" : \"closed\",\n        onClick(event) {\n          if (branchState.isDisabled) return\n          send({ type: \"BRANCH_TOGGLE.CLICK\", id: branchState.id })\n          event.stopPropagation()\n        },\n      })\n    },\n\n    getBranchControlProps(props) {\n      const branchState = getBranchState(props)\n      return normalize.element({\n        ...parts.branchControl.attrs,\n        role: \"button\",\n        dir: state.context.dir,\n        tabIndex: branchState.isFocused ? 0 : -1,\n        \"data-state\": branchState.isExpanded ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(branchState.isDisabled),\n        \"data-selected\": dataAttr(branchState.isSelected),\n        \"data-branch\": branchState.id,\n        \"data-depth\": props.depth,\n        onFocus(event) {\n          send({ type: \"ITEM.FOCUS\", id: branchState.id })\n          event.stopPropagation()\n        },\n        onClick(event) {\n          if (branchState.isDisabled) return\n\n          const isMetaKey = event.metaKey || event.ctrlKey\n          send({ type: \"BRANCH.CLICK\", id: branchState.id, shiftKey: event.shiftKey, ctrlKey: isMetaKey })\n\n          event.stopPropagation()\n        },\n      })\n    },\n\n    getBranchTextProps(props) {\n      const branchState = getBranchState(props)\n      return normalize.element({\n        ...parts.branchText.attrs,\n        dir: state.context.dir,\n        \"data-branch\": branchState.id,\n        \"data-disabled\": dataAttr(branchState.isDisabled),\n        \"data-state\": branchState.isExpanded ? \"open\" : \"closed\",\n      })\n    },\n\n    getBranchContentProps(props) {\n      const branchState = getBranchState(props)\n      return normalize.element({\n        ...parts.branchContent.attrs,\n        role: \"group\",\n        dir: state.context.dir,\n        \"data-branch\": branchState.id,\n        \"data-state\": branchState.isExpanded ? \"open\" : \"closed\",\n        hidden: !branchState.isExpanded,\n      })\n    },\n  }\n}\n","import { createScope, getByTypeahead, isHTMLElement, isHiddenElement, query, queryAll } from \"@zag-js/dom-query\"\nimport type { MachineContext as Ctx } from \"./tree-view.types\"\n\ninterface TreeWalkerOpts {\n  skipHidden?: boolean\n  root?: HTMLElement | null\n}\n\nexport const dom = createScope({\n  getLabelId: (ctx: Ctx) => `tree-label:${ctx.id}`,\n  getRootId: (ctx: Ctx) => `tree-root:${ctx.id}`,\n  getTreeId: (ctx: Ctx) => `tree-tree:${ctx.id}`,\n\n  getNodeId(node: Node | null | undefined) {\n    if (!isHTMLElement(node)) return null\n    return node.dataset.branch ?? node.dataset.item ?? null\n  },\n\n  getNodeEl(ctx: Ctx, id: string) {\n    const node = dom.getItemEl(ctx, id) ?? dom.getBranchEl(ctx, id)\n    if (node?.dataset.part === \"branch\") {\n      return node.querySelector<HTMLElement>(\"[data-part=branch-control]\")\n    }\n    return node\n  },\n\n  getTreeEl(ctx: Ctx) {\n    return dom.getById(ctx, dom.getTreeId(ctx))\n  },\n\n  getBranchEl(ctx: Ctx, id: string) {\n    const selector = `[role=treeitem][data-branch=\"${id}\"]`\n    return query(dom.getTreeEl(ctx), selector)\n  },\n  getItemEl(ctx: Ctx, id: string) {\n    const selector = `[role=treeitem][data-item=\"${id}\"]`\n    return query(dom.getTreeEl(ctx), selector)\n  },\n  getBranchControlEl(ctx: Ctx, id: string) {\n    const selector = \"[data-part=branch-control]\"\n    return query(dom.getBranchEl(ctx, id), selector)\n  },\n\n  getFocusedEl(ctx: Ctx) {\n    if (!ctx.focusedId) return null\n    return dom.getById(ctx, ctx.focusedId)\n  },\n\n  focusNode(node: Node | Element | null | undefined, options?: FocusOptions) {\n    if (isHTMLElement(node)) node.focus(options)\n  },\n\n  getNodeDepth(node: HTMLElement | null) {\n    return node?.dataset.depth ? Number(node.dataset.depth) : -1\n  },\n\n  getTreeWalker(ctx: Ctx, opts?: TreeWalkerOpts) {\n    const { skipHidden = true, root } = opts ?? {}\n\n    const treeEl = root || dom.getTreeEl(ctx)\n    if (!treeEl) throw new Error(\"Tree or branch root not found\")\n\n    const doc = dom.getDoc(ctx)\n\n    return doc.createTreeWalker(treeEl, NodeFilter.SHOW_ELEMENT, {\n      acceptNode(node: HTMLElement) {\n        if (skipHidden && isHiddenElement(node)) {\n          return NodeFilter.FILTER_REJECT\n        }\n\n        if (node.role === \"treeitem\" && node.dataset.part !== \"branch\") {\n          return NodeFilter.FILTER_ACCEPT\n        }\n\n        if (node.role === \"button\" && node.dataset.part === \"branch-control\") {\n          return NodeFilter.FILTER_ACCEPT\n        }\n\n        return NodeFilter.FILTER_SKIP\n      },\n    })\n  },\n\n  getMatchingEl(ctx: Ctx, key: string) {\n    const walker = dom.getTreeWalker(ctx)\n\n    const elements: HTMLElement[] = []\n    let node = walker.firstChild()\n\n    while (node) {\n      if (isHTMLElement(node)) elements.push(node)\n      node = walker.nextNode()\n    }\n\n    return getByTypeahead(elements, {\n      state: ctx.typeahead,\n      key,\n      activeId: ctx.focusedId,\n      itemToId: (v) => dom.getNodeId(v) ?? v.id,\n    })\n  },\n\n  getTreeNodes(ctx: Ctx, options: TreeWalkerOpts = {}) {\n    const walker = dom.getTreeWalker(ctx, options)\n\n    const nodes: HTMLElement[] = []\n    let node = walker.firstChild()\n\n    while (node) {\n      if (isHTMLElement(node)) {\n        nodes.push(node)\n      }\n      node = walker.nextNode()\n    }\n\n    return nodes\n  },\n\n  getBranchNodes(ctx: Ctx, depth: number | null) {\n    if (depth === -1) return []\n    return queryAll(dom.getTreeEl(ctx), `[role=treeitem][data-part=branch][data-depth=\"${depth}\"]`)\n  },\n\n  getNodesInRange(nodes: HTMLElement[], startNode: HTMLElement, endNode: HTMLElement) {\n    const nextSet = new Set<string>()\n\n    nodes.forEach((node) => {\n      const nodeId = dom.getNodeId(node)\n      if (nodeId == null) return\n\n      // compare node position with firstSelectedEl and focusedEl\n      // if node is between firstSelectedEl and focusedEl, add it to nextSet\n      if (node === startNode || node === endNode) {\n        nextSet.add(nodeId)\n        return\n      }\n\n      // use node.compareDocumentPosition to compare node position\n      // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n\n      const startPos = node.compareDocumentPosition(startNode)\n      const endPos = node.compareDocumentPosition(endNode)\n\n      // if node is before firstSelectedEl and after focusedEl, add it to nextSet\n      if (startPos & Node.DOCUMENT_POSITION_FOLLOWING && endPos & Node.DOCUMENT_POSITION_PRECEDING) {\n        nextSet.add(nodeId)\n        return\n      }\n\n      // if node is after firstSelectedEl and before focusedEl, add it to nextSet\n      if (startPos & Node.DOCUMENT_POSITION_PRECEDING && endPos & Node.DOCUMENT_POSITION_FOLLOWING) {\n        nextSet.add(nodeId)\n        return\n      }\n    })\n\n    return nextSet\n  },\n})\n","import { createMachine, guards } from \"@zag-js/core\"\nimport { getByTypeahead, isHTMLElement } from \"@zag-js/dom-query\"\nimport { observeChildren } from \"@zag-js/mutation-observer\"\nimport { compact } from \"@zag-js/utils\"\nimport { dom } from \"./tree-view.dom\"\nimport type { MachineContext, MachineState, UserDefinedContext } from \"./tree-view.types\"\n\nconst { and } = guards\n\nexport function machine(userContext: UserDefinedContext) {\n  const ctx = compact(userContext)\n  return createMachine<MachineContext, MachineState>(\n    {\n      id: \"tree-view\",\n      initial: \"idle\",\n      context: {\n        expandedIds: new Set(),\n        selectedIds: new Set(),\n        focusedId: null,\n        openOnClick: true,\n        selectionMode: \"single\",\n        ...ctx,\n        typeahead: getByTypeahead.defaultOptions,\n      },\n\n      computed: {\n        isMultipleSelection: (ctx) => ctx.selectionMode === \"multiple\",\n      },\n\n      on: {\n        \"EXPANDED.SET\": {\n          actions: [\"setExpanded\"],\n        },\n        \"SELECTED.SET\": {\n          actions: [\"setSelected\"],\n        },\n        \"SELECTED.ALL\": [\n          {\n            guard: and(\"isMultipleSelection\", \"moveFocus\"),\n            actions: [\"selectAllItems\", \"focusTreeLastItem\"],\n          },\n          {\n            guard: \"isMultipleSelection\",\n            actions: [\"selectAllItems\"],\n          },\n        ],\n        \"EXPANDED.ALL\": {\n          actions: [\"expandAllBranches\"],\n        },\n      },\n\n      activities: [\"trackChildrenMutation\"],\n\n      entry: [\"setFocusableNode\"],\n\n      states: {\n        idle: {\n          on: {\n            \"ITEM.FOCUS\": {\n              actions: [\"setFocusedItem\"],\n            },\n            \"ITEM.ARROW_DOWN\": [\n              {\n                guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n                actions: [\"focusTreeNextItem\", \"extendSelectionToNextItem\"],\n              },\n              {\n                actions: [\"focusTreeNextItem\"],\n              },\n            ],\n            \"ITEM.ARROW_UP\": [\n              {\n                guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n                actions: [\"focusTreePrevItem\", \"extendSelectionToPrevItem\"],\n              },\n              {\n                actions: [\"focusTreePrevItem\"],\n              },\n            ],\n            \"ITEM.ARROW_LEFT\": {\n              actions: [\"focusBranchControl\"],\n            },\n            \"BRANCH.ARROW_LEFT\": [\n              {\n                guard: \"isBranchExpanded\",\n                actions: [\"collapseBranch\"],\n              },\n              {\n                actions: [\"focusBranchControl\"],\n              },\n            ],\n            \"BRANCH.ARROW_RIGHT\": [\n              {\n                guard: and(\"isBranchFocused\", \"isBranchExpanded\"),\n                actions: [\"focusBranchFirstItem\"],\n              },\n              {\n                actions: [\"expandBranch\"],\n              },\n            ],\n            \"EXPAND.SIBLINGS\": {\n              actions: [\"expandSiblingBranches\"],\n            },\n            \"ITEM.HOME\": [\n              {\n                guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n                actions: [\"extendSelectionToFirstItem\", \"focusTreeFirstItem\"],\n              },\n              {\n                actions: [\"focusTreeFirstItem\"],\n              },\n            ],\n            \"ITEM.END\": [\n              {\n                guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n                actions: [\"extendSelectionToLastItem\", \"focusTreeLastItem\"],\n              },\n              {\n                actions: [\"focusTreeLastItem\"],\n              },\n            ],\n            \"ITEM.CLICK\": [\n              {\n                guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n                actions: [\"addOrRemoveItemFromSelection\"],\n              },\n              {\n                guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n                actions: [\"extendSelectionToItem\"],\n              },\n              {\n                actions: [\"selectItem\"],\n              },\n            ],\n            \"BRANCH.CLICK\": [\n              {\n                guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n                actions: [\"addOrRemoveItemFromSelection\"],\n              },\n              {\n                guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n                actions: [\"extendSelectionToItem\"],\n              },\n              {\n                guard: \"openOnClick\",\n                actions: [\"selectItem\", \"toggleBranch\"],\n              },\n              {\n                actions: [\"selectItem\"],\n              },\n            ],\n            \"BRANCH_TOGGLE.CLICK\": {\n              actions: [\"toggleBranch\"],\n            },\n            \"TREE.TYPEAHEAD\": {\n              actions: [\"focusMatchedItem\"],\n            },\n            \"TREE.BLUR\": {\n              actions: [\"clearFocusedItem\", \"setFocusableNode\"],\n            },\n          },\n        },\n      },\n    },\n    {\n      guards: {\n        isBranchFocused: (ctx, evt) => ctx.focusedId === evt.id,\n        isBranchExpanded: (ctx, evt) => ctx.expandedIds.has(evt.id),\n        isShiftKey: (_ctx, evt) => evt.shiftKey,\n        isCtrlKey: (_ctx, evt) => evt.ctrlKey,\n        hasSelectedItems: (ctx) => ctx.selectedIds.size > 0,\n        isMultipleSelection: (ctx) => ctx.isMultipleSelection,\n        moveFocus: (_ctx, evt) => !!evt.moveFocus,\n        openOnClick: (ctx) => !!ctx.openOnClick,\n      },\n      activities: {\n        trackChildrenMutation(ctx, _evt, { send }) {\n          const treeEl = dom.getTreeEl(ctx)\n          return observeChildren(treeEl, (records) => {\n            const removedNodes = records\n              .flatMap((r) => Array.from(r.removedNodes))\n              .filter((node) => {\n                if (!isHTMLElement(node)) return false\n                return node.matches(\"[role=treeitem]\") || node.matches(\"[role=group]\")\n              })\n\n            if (!removedNodes.length) return\n\n            let elementToFocus: HTMLElement | null = null\n            records.forEach((record) => {\n              if (isHTMLElement(record.nextSibling)) {\n                elementToFocus = record.nextSibling\n              } else if (isHTMLElement(record.previousSibling)) {\n                elementToFocus = record.previousSibling\n              }\n            })\n\n            if (elementToFocus) {\n              dom.focusNode(elementToFocus)\n            }\n\n            const removedIds: Set<string> = new Set()\n            removedNodes.forEach((node) => {\n              const nodeId = dom.getNodeId(node)\n              if (isHTMLElement(node) && nodeId != null) {\n                removedIds.add(nodeId)\n              }\n            })\n\n            const nextSet = new Set(ctx.selectedIds)\n            removedIds.forEach((id) => nextSet.delete(id))\n            send({ type: \"SELECTED.SET\", value: removedIds })\n          })\n        },\n      },\n      actions: {\n        setFocusableNode(ctx) {\n          if (ctx.focusedId) return\n\n          if (ctx.selectedIds.size > 0) {\n            const firstSelectedId = Array.from(ctx.selectedIds)[0]\n            ctx.focusedId = firstSelectedId\n            return\n          }\n\n          const walker = dom.getTreeWalker(ctx)\n          const firstItem = walker.firstChild()\n\n          if (!isHTMLElement(firstItem)) return\n          // don't use set.focused here because it will trigger focusChange event\n          ctx.focusedId = dom.getNodeId(firstItem)\n        },\n        selectItem(ctx, evt) {\n          set.selected(ctx, new Set([evt.id]))\n        },\n        setFocusedItem(ctx, evt) {\n          set.focused(ctx, evt.id)\n        },\n        clearFocusedItem(ctx) {\n          set.focused(ctx, null)\n        },\n        clearSelectedItem(ctx) {\n          set.selected(ctx, new Set())\n        },\n        toggleBranch(ctx, evt) {\n          const nextSet = new Set(ctx.expandedIds)\n\n          if (nextSet.has(evt.id)) {\n            nextSet.delete(evt.id)\n            // collapseEffect(ctx, evt)\n          } else {\n            nextSet.add(evt.id)\n          }\n\n          set.expanded(ctx, nextSet)\n        },\n        expandBranch(ctx, evt) {\n          const nextSet = new Set(ctx.expandedIds)\n          nextSet.add(evt.id)\n          set.expanded(ctx, nextSet)\n        },\n        collapseBranch(ctx, evt) {\n          const nextSet = new Set(ctx.expandedIds)\n          nextSet.delete(evt.id)\n          set.expanded(ctx, nextSet)\n        },\n        setExpanded(ctx, evt) {\n          set.expanded(ctx, evt.value)\n        },\n        setSelected(ctx, evt) {\n          set.selected(ctx, evt.value)\n        },\n        focusTreeFirstItem(ctx) {\n          const walker = dom.getTreeWalker(ctx)\n          dom.focusNode(walker.firstChild())\n        },\n        focusTreeLastItem(ctx, evt) {\n          const walker = dom.getTreeWalker(ctx)\n          dom.focusNode(walker.lastChild(), { preventScroll: evt.preventScroll })\n        },\n        focusBranchFirstItem(ctx, evt) {\n          const focusedEl = dom.getNodeEl(ctx, evt.id)\n          if (!focusedEl) return\n\n          const walker = dom.getTreeWalker(ctx)\n\n          walker.currentNode = focusedEl\n          dom.focusNode(walker.nextNode())\n        },\n        focusTreeNextItem(ctx, evt) {\n          const focusedEl = dom.getNodeEl(ctx, evt.id)\n          if (!focusedEl) return\n\n          const walker = dom.getTreeWalker(ctx)\n\n          if (ctx.focusedId) {\n            walker.currentNode = focusedEl\n            const nextNode = walker.nextNode()\n            dom.focusNode(nextNode)\n          } else {\n            dom.focusNode(walker.firstChild())\n          }\n        },\n        focusTreePrevItem(ctx, evt) {\n          const focusedEl = dom.getNodeEl(ctx, evt.id)\n          if (!focusedEl) return\n\n          const walker = dom.getTreeWalker(ctx)\n\n          if (ctx.focusedId) {\n            walker.currentNode = focusedEl\n            const prevNode = walker.previousNode()\n            dom.focusNode(prevNode)\n          } else {\n            dom.focusNode(walker.lastChild())\n          }\n        },\n        focusBranchControl(ctx, evt) {\n          const focusedEl = dom.getNodeEl(ctx, evt.id)\n          if (!focusedEl) return\n\n          const parentDepth = Number(focusedEl.dataset.depth) - 1\n          if (parentDepth < 0) return\n\n          const branchSelector = `[data-part=branch][data-depth=\"${parentDepth}\"]`\n          const closestBranch = focusedEl.closest(branchSelector)\n\n          const branchControl = closestBranch?.querySelector(\"[data-part=branch-control]\")\n          dom.focusNode(branchControl)\n        },\n        selectAllItems(ctx) {\n          const nextSet = new Set<string>()\n          const walker = dom.getTreeWalker(ctx)\n          let node = walker.firstChild()\n          while (node) {\n            const nodeId = dom.getNodeId(node)\n            if (isHTMLElement(node) && nodeId != null) {\n              nextSet.add(nodeId)\n            }\n            node = walker.nextNode()\n          }\n          set.selected(ctx, nextSet)\n        },\n        focusMatchedItem(ctx, evt) {\n          dom.focusNode(dom.getMatchingEl(ctx, evt.key))\n        },\n        addOrRemoveItemFromSelection(ctx, evt) {\n          const focusedEl = dom.getNodeEl(ctx, evt.id)\n          if (!focusedEl) return\n\n          const nextSet = new Set(ctx.selectedIds)\n\n          const nodeId = dom.getNodeId(focusedEl)\n          if (nodeId == null) return\n\n          if (nextSet.has(nodeId)) {\n            nextSet.delete(nodeId)\n          } else {\n            nextSet.add(nodeId)\n          }\n\n          set.selected(ctx, nextSet)\n        },\n        expandAllBranches(ctx) {\n          const nextSet = new Set<string>()\n          const walker = dom.getTreeWalker(ctx, { skipHidden: false })\n          while (walker.nextNode()) {\n            const node = walker.currentNode\n            const nodeId = dom.getNodeId(node)\n            if (isHTMLElement(node) && node.dataset.part === \"branch-control\" && nodeId != null) {\n              nextSet.add(nodeId)\n            }\n          }\n          set.expanded(ctx, nextSet)\n        },\n        expandSiblingBranches(ctx, evt) {\n          const focusedEl = dom.getNodeEl(ctx, evt.id)\n          const nodes = dom.getBranchNodes(ctx, dom.getNodeDepth(focusedEl))\n\n          const nextSet = new Set<string>()\n          nodes.forEach((node) => {\n            const nodeId = dom.getNodeId(node)\n            if (nodeId == null) return\n            nextSet.add(nodeId)\n          })\n\n          set.expanded(ctx, nextSet)\n        },\n        extendSelectionToItem(ctx, evt) {\n          const focusedEl = dom.getNodeEl(ctx, evt.id)\n          if (!focusedEl) return\n\n          const nodes = dom.getTreeNodes(ctx)\n          const selectedIds = Array.from(ctx.selectedIds)\n          const anchorEl = dom.getNodeEl(ctx, selectedIds[0]) || nodes[0]\n\n          const nextSet = dom.getNodesInRange(nodes, anchorEl, focusedEl)\n\n          set.selected(ctx, nextSet)\n        },\n        extendSelectionToNextItem(ctx, evt) {\n          const nodeId = evt.id\n\n          const currentNode = dom.getNodeEl(ctx, nodeId)\n          if (!currentNode) return\n\n          const walker = dom.getTreeWalker(ctx)\n          walker.currentNode = currentNode\n\n          const nextNode = walker.nextNode()\n          dom.focusNode(nextNode)\n\n          // extend selection to nextNode (preserve the anchor node)\n          const selectedIds = new Set(ctx.selectedIds)\n          const nextNodeId = dom.getNodeId(nextNode)\n\n          if (nextNodeId == null) return\n\n          if (selectedIds.has(nodeId) && selectedIds.has(nextNodeId)) {\n            selectedIds.delete(nodeId)\n          } else if (!selectedIds.has(nextNodeId)) {\n            selectedIds.add(nextNodeId)\n          }\n\n          set.selected(ctx, selectedIds)\n        },\n        extendSelectionToPrevItem(ctx, evt) {\n          const nodeId = evt.id\n\n          const currentNode = dom.getNodeEl(ctx, nodeId)\n          if (!currentNode) return\n\n          const walker = dom.getTreeWalker(ctx)\n          walker.currentNode = currentNode\n\n          const prevNode = walker.previousNode()\n          dom.focusNode(prevNode)\n\n          // extend selection to prevNode (preserve the anchor node)\n          const selectedIds = new Set(ctx.selectedIds)\n          const prevNodeId = dom.getNodeId(prevNode)\n\n          if (prevNodeId == null) return\n\n          if (selectedIds.has(nodeId) && selectedIds.has(prevNodeId)) {\n            selectedIds.delete(nodeId)\n          } else if (!selectedIds.has(prevNodeId)) {\n            selectedIds.add(prevNodeId)\n          }\n\n          set.selected(ctx, selectedIds)\n        },\n        extendSelectionToFirstItem(ctx) {\n          const nodes = dom.getTreeNodes(ctx)\n\n          const anchorEl = dom.getNodeEl(ctx, [...ctx.selectedIds][0]) || nodes[0]\n          const focusedEl = nodes[0]\n\n          const selectedIds = dom.getNodesInRange(nodes, anchorEl, focusedEl)\n          set.selected(ctx, selectedIds)\n        },\n        extendSelectionToLastItem(ctx) {\n          const nodes = dom.getTreeNodes(ctx)\n\n          const anchorEl = dom.getNodeEl(ctx, [...ctx.selectedIds][0]) || nodes[0]\n          const focusedEl = nodes[nodes.length - 1]\n\n          const selectedIds = dom.getNodesInRange(nodes, anchorEl, focusedEl)\n          set.selected(ctx, selectedIds)\n        },\n      },\n    },\n  )\n}\n\n// if the branch is collapsed, we need to remove all its children from selectedIds\n// function collapseEffect(ctx: MachineContext, evt: any) {\n//   const walker = dom.getTreeWalker(ctx, {\n//     skipHidden: false,\n//     root: dom.getBranchEl(ctx, evt.id),\n//   })\n\n//   const idsToRemove = new Set<string>()\n//   let node = walker.firstChild()\n//   while (node) {\n//     if (isHTMLElement(node)) {\n//       idsToRemove.add(dom.getNodeId(node))\n//     }\n//     node = walker.nextNode()\n//   }\n\n//   const nextSelectedSet = new Set(ctx.selectedIds)\n//   idsToRemove.forEach((id) => nextSelectedSet.delete(id))\n//   set.selected(ctx, nextSelectedSet)\n// }\n\nconst invoke = {\n  focusChange(ctx: MachineContext) {\n    ctx.onFocusChange?.({ focusedId: ctx.focusedId! })\n  },\n  expandedChange(ctx: MachineContext) {\n    ctx.onExpandedChange?.({\n      expandedIds: ctx.expandedIds,\n      focusedId: ctx.focusedId!,\n    })\n  },\n  selectionChange(ctx: MachineContext) {\n    ctx.onSelectionChange?.({\n      selectedIds: ctx.selectedIds,\n      focusedId: ctx.focusedId!,\n    })\n  },\n}\n\nconst set = {\n  selected(ctx: MachineContext, set: Set<string>) {\n    ctx.selectedIds = set\n    invoke.selectionChange(ctx)\n  },\n  focused(ctx: MachineContext, id: string | null) {\n    ctx.focusedId = id\n    invoke.focusChange(ctx)\n  },\n  expanded(ctx: MachineContext, set: Set<string>) {\n    ctx.expandedIds = set\n    invoke.expandedChange(ctx)\n  },\n}\n"],"mappings":"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","names":["event","getByTypeahead","isHTMLElement","getByTypeahead","ctx","isHTMLElement","set"]}